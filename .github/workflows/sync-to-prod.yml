name: Sync to Production Repo

on:
  pull_request_review:
    types: [submitted]

jobs:
  sync-to-production:
    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout QA repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          token: ${{ secrets.API_TOKEN_GITHUB }}
          ref: ${{ github.event.pull_request.head.ref }} # Checkout the PR branch explicitly

      - name: Debug checkout
        run: |
          echo "Current branch: $(git branch --show-current)"
          echo "Latest commit: $(git log -1 --pretty=format:'%h - %s')"

      - name: Set up Git config
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Extract PR information
        id: pr_info
        run: |
          echo "pr_title=$(echo '${{ github.event.pull_request.title }}')" >> $GITHUB_OUTPUT
          echo "pr_branch=$(echo '${{ github.event.pull_request.head.ref }}')" >> $GITHUB_OUTPUT
          echo "pr_number=$(echo '${{ github.event.pull_request.number }}')" >> $GITHUB_OUTPUT
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Branch: ${{ github.event.pull_request.head.ref }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"

      - name: List files in QA branch
        run: |
          echo "Files in QA repository (current branch):"
          ls -la

      - name: Clone production repository
        run: |
          echo "Cloning production repository..."
          git clone https://${{ secrets.API_TOKEN_GITHUB }}@github.com/brunolopesdev/nuxt-crud.git /tmp/prod-repo
          cd /tmp/prod-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          echo "Default branch in production repo: $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')"

      - name: Force sync changes to production
        id: sync_changes
        run: |
          # Get branch name from PR info
          export BRANCH_NAME="${{ steps.pr_info.outputs.pr_branch }}"
          echo "Syncing branch: $BRANCH_NAME"

          # Debug current state in QA repo
          echo "Contents of QA repo (current directory):"
          find . -type f -not -path "*/\.git/*" | sort | head -n 20

          cd /tmp/prod-repo

          # Check if branch exists in remote and create/checkout
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "Branch exists in production, checking it out"
            git checkout $BRANCH_NAME
            git pull origin $BRANCH_NAME
          else
            echo "Creating new branch in production"
            git checkout -b $BRANCH_NAME
          fi

          # Debug current state in production repo before copy
          echo "Files in production repo before sync:"
          find . -type f -not -path "*/\.git/*" | sort | head -n 20

          # Force copy all files from QA repo to production repo
          echo "Syncing files from QA to production..."
          rsync -av --delete --exclude='.git/' --exclude='.github/' --exclude='node_modules/' $GITHUB_WORKSPACE/ /tmp/prod-repo/

          # Debug after copy
          echo "Files in production repo after sync:"
          find . -type f -not -path "*/\.git/*" | sort | head -n 20

          # Commit changes even if git says there's nothing to commit
          echo "Forcing commit of changes..."
          git add --all

          # Try to commit, but don't fail if there's nothing to commit
          git diff --staged --quiet || git commit -m "[Sync from QA] #${{ steps.pr_info.outputs.pr_number }}: ${{ steps.pr_info.outputs.pr_title }}"

          # Push changes to production branch
          echo "Pushing changes to production repository..."
          git push origin $BRANCH_NAME

          # Check if there are commits between master and branch
          git fetch origin master
          COMMIT_COUNT=$(git rev-list --count origin/master..$BRANCH_NAME)
          echo "Commit count between master and $BRANCH_NAME: $COMMIT_COUNT"

          if [ "$COMMIT_COUNT" -gt "0" ]; then
            echo "has_commits=true" >> $GITHUB_OUTPUT
            echo "Diferenças detectadas entre master e $BRANCH_NAME"
            git log --oneline origin/master..$BRANCH_NAME
          else
            echo "has_commits=false" >> $GITHUB_OUTPUT
            echo "Nenhuma diferença detectada entre master e $BRANCH_NAME"

            # Debug: Compare content between branches
            echo "Comparando arquivos entre master e $BRANCH_NAME..."
            git diff --name-status origin/master $BRANCH_NAME
          fi

      - name: Create PR in production repository
        if: steps.sync_changes.outputs.has_commits == 'true'
        env:
          GH_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        run: |
          # Check if PR already exists
          cd /tmp/prod-repo
          echo "Checking if PR already exists..."
          PR_EXISTS=$(gh pr list --head ${{ steps.pr_info.outputs.pr_branch }} --json number | jq '. | length')
          echo "PR exists check result: $PR_EXISTS"

          if [ "$PR_EXISTS" -eq "0" ]; then
            echo "Creating new PR in production repository..."
            gh pr create \
              --title "[Sync from QA] #${{ steps.pr_info.outputs.pr_number }}: ${{ steps.pr_info.outputs.pr_title }}" \
              --body "**Automated PR created by GitHub Actions**

          This PR was automatically created to sync changes from the QA repository.

          Original PR: #${{ steps.pr_info.outputs.pr_number }}
          Original PR Title: ${{ steps.pr_info.outputs.pr_title }}
          Approved by: ${{ github.event.review.user.login }}" \
              --repo brunolopesdev/nuxt-crud \
              --base master \
              --head ${{ steps.pr_info.outputs.pr_branch }}
            echo "PR created successfully"
          else
            echo "PR already exists in production repository"
          fi

      - name: Show info when no commits are available
        if: steps.sync_changes.outputs.has_commits == 'false'
        run: |
          echo "ATENÇÃO: Não foi possível detectar diferenças entre as branches master e ${{ steps.pr_info.outputs.pr_branch }} no repositório de produção."
          echo "Possíveis razões:"
          echo "1. Os repositórios já estão sincronizados"
          echo "2. A branch existe, mas não tem alterações em relação à master"
          echo "3. Houve um problema ao sincronizar os arquivos"
          echo ""
          echo "Para depurar este problema, verifique:"
          echo "- Os logs acima para ver se os arquivos foram copiados corretamente"
          echo "- Se há diferenças reais entre os repositórios QA e produção"
          echo "- Se o branch ${{ steps.pr_info.outputs.pr_branch }} tem commits exclusivos em relação à master"