name: Sync to Production Repo

on:
  pull_request_review:
    types: [submitted]

jobs:
  sync-to-production:
    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout QA repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          token: ${{ secrets.API_TOKEN_GITHUB }}
          ref: ${{ github.event.pull_request.head.ref }} # Checkout the PR branch explicitly

      - name: Debug checkout
        run: |
          echo "Current branch: $(git branch --show-current)"
          echo "Latest commit: $(git log -1 --pretty=format:'%h - %s')"
          echo "Files in current workspace:"
          find . -type f -not -path "*/\.git/*" -not -path "*/node_modules/*" | head -n 30

      - name: Set up Git config
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Extract PR information
        id: pr_info
        run: |
          echo "pr_title=$(echo '${{ github.event.pull_request.title }}')" >> $GITHUB_OUTPUT
          echo "pr_branch=$(echo '${{ github.event.pull_request.head.ref }}')" >> $GITHUB_OUTPUT
          echo "pr_number=$(echo '${{ github.event.pull_request.number }}')" >> $GITHUB_OUTPUT
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Branch: ${{ github.event.pull_request.head.ref }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"

      - name: Create temp directory for production repo
        run: |
          mkdir -p /tmp/prod-repo
          echo "Temporary directory created at /tmp/prod-repo"

      - name: Clone production repository
        run: |
          echo "Cloning production repository..."
          git clone https://${{ secrets.API_TOKEN_GITHUB }}@github.com/brunolopesdev/nuxt-crud.git /tmp/prod-repo
          cd /tmp/prod-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Copy files and create branch in production
        id: sync_changes
        run: |
          # Get branch name from PR info
          export BRANCH_NAME="${{ steps.pr_info.outputs.pr_branch }}"
          echo "Working with branch: $BRANCH_NAME"

          # Print environment info
          echo "Current working directory: $(pwd)"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"

          # Create new branch in production repo
          cd /tmp/prod-repo

          # Check if branch exists in remote and create/checkout
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "Branch exists in production, checking it out"
            git checkout $BRANCH_NAME
            git pull origin $BRANCH_NAME
          else
            echo "Creating new branch in production"
            git checkout -b $BRANCH_NAME
          fi

          # Copy all files manually using cp command (except .git and .github)
          echo "Copying files from QA to production..."
          cd $GITHUB_WORKSPACE

          # Create a list of files to copy (excluding .git, .github, and node_modules)
          find . -type f -not -path "*/\.git/*" -not -path "*/\.github/*" -not -path "*/node_modules/*" > /tmp/files_to_copy.txt

          # Create needed directories in production repo
          cat /tmp/files_to_copy.txt | xargs -I{} dirname {} | sort -u | xargs -I{} mkdir -p /tmp/prod-repo/{}

          # Copy each file individually
          cat /tmp/files_to_copy.txt | while read file; do
            echo "Copying: $file"
            cp --parents "$file" /tmp/prod-repo/
          done

          # Return to production repo
          cd /tmp/prod-repo

          # Debug: List files in production repo after copy
          echo "Files in production repo after copy:"
          find . -type f -not -path "*/\.git/*" | head -n 30

          # Commit and push all changes
          echo "Committing changes to production..."
          git add -A

          # Force a commit even if git thinks there are no changes
          git commit -m "[Sync from QA] #${{ steps.pr_info.outputs.pr_number }}: ${{ steps.pr_info.outputs.pr_title }}" || echo "No changes to commit"

          # Push changes to production branch
          echo "Pushing changes to production repository..."
          git push origin $BRANCH_NAME

          # Verify the branch has commits compared to master
          git fetch origin master
          COMMIT_COUNT=$(git rev-list --count origin/master..$BRANCH_NAME)
          echo "Commit count between master and $BRANCH_NAME: $COMMIT_COUNT"

          if [ "$COMMIT_COUNT" -gt "0" ]; then
            echo "has_commits=true" >> $GITHUB_OUTPUT
            echo "DiferenÃ§as detectadas entre master e $BRANCH_NAME"
            git diff --stat origin/master $BRANCH_NAME
          else
            # Force a dummy commit to ensure there's a difference
            echo "No commits detected, creating a placeholder commit"
            touch .sync-placeholder
            git add .sync-placeholder
            git commit -m "[Sync placeholder] Ensuring branch has differences from master"
            git push origin $BRANCH_NAME
            echo "has_commits=true" >> $GITHUB_OUTPUT
          fi

      - name: Create PR in production repository
        env:
          GH_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        run: |
          # Check if PR already exists
          cd /tmp/prod-repo
          echo "Checking if PR already exists..."
          PR_EXISTS=$(gh pr list --head ${{ steps.pr_info.outputs.pr_branch }} --json number | jq '. | length')
          echo "PR exists check result: $PR_EXISTS"

          if [ "$PR_EXISTS" -eq "0" ]; then
            echo "Creating new PR in production repository..."
            gh pr create \
              --title "[Sync from QA] #${{ steps.pr_info.outputs.pr_number }}: ${{ steps.pr_info.outputs.pr_title }}" \
              --body "**Automated PR created by GitHub Actions**

          This PR was automatically created to sync changes from the QA repository.

          Original PR: #${{ steps.pr_info.outputs.pr_number }}
          Original PR Title: ${{ steps.pr_info.outputs.pr_title }}
          Approved by: ${{ github.event.review.user.login }}" \
              --repo brunolopesdev/nuxt-crud \
              --base master \
              --head ${{ steps.pr_info.outputs.pr_branch }}
            echo "PR created successfully"
          else
            echo "PR already exists in production repository"
          fi